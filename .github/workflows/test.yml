on: [push, workflow_dispatch]

jobs:
  test_buddy_login_oidc:
    runs-on: ubuntu-latest
    name: Test Buddy Login Action - OIDC (${{ matrix.ref == './' && 'local' || 'v1' }})
    strategy:
      matrix:
        ref: ['./', 'buddy/login@v1']
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Buddy (OIDC)
        id: buddy_login
        uses: ${{ matrix.ref }}
        with:
          debug: true
          api_url: 'https://api.awsstage.net'
          provider_id: ${{ secrets.BUDDY_PROVIDER_ID }}
          audience: 'buddy'
      - name: Test BUDDY_TOKEN environment variable
        run: |
          if [ -z "$BUDDY_TOKEN" ]; then
            echo "Error: BUDDY_TOKEN is not set"
            exit 1
          else
            echo "Success: BUDDY_TOKEN is set"
          fi
      - name: Test BUDDY_API_ENDPOINT environment variable
        run: |
          if [ -z "$BUDDY_API_ENDPOINT" ]; then
            echo "Error: BUDDY_API_ENDPOINT is not set"
            exit 1
          else
            echo "Success: BUDDY_API_ENDPOINT is set ($BUDDY_API_ENDPOINT)"
          fi
      - name: Test step outputs
        run: |
          if [ -z "${{ steps.buddy_login.outputs.api_key }}" ]; then
            echo "Error: Step output api_key is not set"
            exit 1
          else
            echo "Success: Step output api_key is set"
          fi
          if [ -z "${{ steps.buddy_login.outputs.api_endpoint }}" ]; then
            echo "Error: Step output api_endpoint is not set"
            exit 1
          else
            echo "Success: Step output api_endpoint is set"
          fi
      - name: Call Buddy API to verify token
        run: |
          echo "Testing OIDC token with Buddy API..."
          curl -X GET "$BUDDY_API_ENDPOINT/user" \
            -H "Authorization: Bearer $BUDDY_TOKEN" \
            -H "Content-Type: application/json"

  test_buddy_login_pat:
    runs-on: ubuntu-latest
    name: Test Buddy Login Action - PAT (${{ matrix.ref == './' && 'local' || 'v1' }})
    strategy:
      matrix:
        ref: ['./', 'buddy/login@v1']
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Buddy (PAT)
        id: buddy_login
        uses: ${{ matrix.ref }}
        with:
          debug: true
          api_key: ${{ secrets.BUDDY_PAT }}
          api_url: 'https://api.awsstage.net'
      - name: Test BUDDY_TOKEN environment variable
        run: |
          if [ -z "$BUDDY_TOKEN" ]; then
            echo "Error: BUDDY_TOKEN is not set"
            exit 1
          else
            echo "Success: BUDDY_TOKEN is set"
          fi
      - name: Test BUDDY_API_ENDPOINT environment variable
        run: |
          if [ -z "$BUDDY_API_ENDPOINT" ]; then
            echo "Error: BUDDY_API_ENDPOINT is not set"
            exit 1
          else
            echo "Success: BUDDY_API_ENDPOINT is set ($BUDDY_API_ENDPOINT)"
          fi
      - name: Test step outputs
        run: |
          if [ -z "${{ steps.buddy_login.outputs.api_key }}" ]; then
            echo "Error: Step output api_key is not set"
            exit 1
          else
            echo "Success: Step output api_key is set"
          fi
          if [ -z "${{ steps.buddy_login.outputs.api_endpoint }}" ]; then
            echo "Error: Step output api_endpoint is not set"
            exit 1
          else
            echo "Success: Step output api_endpoint is set"
          fi
      - name: Call Buddy API to verify token
        run: |
          echo "Testing PAT with Buddy API..."
          curl -X GET "$BUDDY_API_ENDPOINT/user" \
            -H "Authorization: Bearer $BUDDY_TOKEN" \
            -H "Content-Type: application/json"

  test_buddy_login_error_scenarios:
    runs-on: ubuntu-latest
    name: Test Buddy Login Action - Error Scenarios
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test with wrong provider_id
        id: wrong_provider
        continue-on-error: true
        uses: ./
        with:
          debug: true
          api_url: 'https://api.awsstage.net'
          provider_id: 'non-existent-provider-id-12345'
          audience: 'buddy'

      - name: Check wrong provider_id error
        if: steps.wrong_provider.outcome != 'failure'
        run: |
          echo "Error: Expected failure for wrong provider_id but got: ${{ steps.wrong_provider.outcome }}"
          exit 1

      - name: Test with wrong audience
        id: wrong_audience
        continue-on-error: true
        uses: ./
        with:
          debug: true
          api_url: 'https://api.awsstage.net'
          provider_id: ${{ secrets.BUDDY_PROVIDER_ID }}
          audience: 'wrong-audience'

      - name: Check wrong audience error
        if: steps.wrong_audience.outcome != 'failure'
        run: |
          echo "Error: Expected failure for wrong audience but got: ${{ steps.wrong_audience.outcome }}"
          exit 1

      - name: Test with empty provider_id
        id: empty_provider
        continue-on-error: true
        uses: ./
        with:
          debug: true
          api_url: 'https://api.awsstage.net'
          provider_id: ''
          audience: 'buddy'

      - name: Check empty provider_id error
        if: steps.empty_provider.outcome != 'failure'
        run: |
          echo "Error: Expected failure for empty provider_id but got: ${{ steps.empty_provider.outcome }}"
          exit 1

      - name: Test with malformed provider_id
        id: malformed_provider
        continue-on-error: true
        uses: ./
        with:
          debug: true
          api_url: 'https://api.awsstage.net'
          provider_id: 'not-a-uuid'
          audience: 'buddy'

      - name: Check malformed provider_id error
        if: steps.malformed_provider.outcome != 'failure'
        run: |
          echo "Error: Expected failure for malformed provider_id but got: ${{ steps.malformed_provider.outcome }}"
          exit 1
